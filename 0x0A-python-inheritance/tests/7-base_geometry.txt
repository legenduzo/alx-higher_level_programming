>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()
>>> bg.integer_validator("age", 21)

# Test integer_validator with invalid type (string)
>>> bg.integer_validator("age", "21")
Traceback (most recent call last):
    ...
TypeError: age must be an integer

# Test integer_validator with zero value
>>> bg.integer_validator("age", 0)
Traceback (most recent call last):
    ...
ValueError: age must be greater than 0

# Test integer_validator with negative value
>>> bg.integer_validator("age", -10)
Traceback (most recent call last):
    ...
ValueError: age must be greater than 0

# Test calling the area() method
>>> bg.area()
Traceback (most recent call last):
    ...
Exception: area() is not implemented

# Test calling integer_validator() without arguments
>>> bg.integer_validator()
Traceback (most recent call last):
    ...
TypeError: BaseGeometry.integer_validator() missing 2 required positional arguments: 'name' and 'value'

# Test calling integer_validator() with only one argument
>>> bg.integer_validator("age")
Traceback (most recent call last):
    ...
TypeError: BaseGeometry.integer_validator() missing 1 required positional argument: 'value'

# Test calling integer_validator() with invalid argument type (tuple)
>>> bg.integer_validator("age", (4,))
Traceback (most recent call last):
    ...
TypeError: age must be an integer

# Test calling integer_validator() with invalid argument type (list)
>>> bg.integer_validator("age", [4])
Traceback (most recent call last):
    ...
TypeError: age must be an integer

# Test calling integer_validator() with invalid argument type (bool)
>>> bg.integer_validator("age", True)

# Test calling integer_validator() with invalid argument type (set)
>>> bg.integer_validator("age", {3, 4})
Traceback (most recent call last):
    ...
TypeError: age must be an integer

# Test calling integer_validator() with invalid argument type (None)
>>> bg.integer_validator("age", None)
Traceback (most recent call last):
    ...
TypeError: age must be an integer

